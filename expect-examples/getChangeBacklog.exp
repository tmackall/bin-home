#!/usr/bin/expect
#
# This script gets the preflight change backlog based on a manifest branch
#
source ~/bin/aLib.exp
set timeout 3
log_user 0

set fileName "/tmp/ChangesReadyForPreflight.txt"
set emailName "abait.stats@qualcomm.com"

#
# process command-line arguments
if { $argc == 0 } { 
	# no args gives you a 24 hour report
	puts "Usage getChangeBacklog.exp \[manifest branch name]"
	set startTime [expr $currTime - $twentyFourHours]
} 

set lmanifestBranch [list]
#
# process manifest name from the command-line
set femail 0
foreach item $argv {
	if { $item == "-e"} {
		set femail 1
	} elseif { $femail == 1} {
		set emailName $item
		set femail 0
	} else {
		lappend lmanifestBranch $item
	}
} 

set currTime [clock seconds]
set timeStart [clock format $currTime -format %d-%m-%Y:T%H:%M]

#
# create a shell
spawn bash

#
# set the prompt
set lPrompt "uniQuePrompt#"
set lCommand "export PS1=$lPrompt\n"
if {[sendSimple $lCommand $lPrompt 5]} {exit}

#=========================================================================================
#
# Procedure to get all the Gerrit changes that qualify for preflight
#
#=========================================================================================
proc getAllReadyChanges { outOutcome} {
        upvar 1 $outOutcome out
        global lPrompt
        set out ""
        log_user 0
        set lCommand "dep_poll.py  --gerritServer review-android.quicinc.com \
			--priorityMode 0 --pollRule \"preflight\" --filterRule  \"rao\" \
			--outputTemplate 'change'\n"
        set lChanges [sendAndReturnOutput $lCommand $lPrompt 600]
        set lines [split $lChanges "\r\n"]  
		foreach item $lines {
			# filter out the crap
			# look for non-whitespace in the first character
			if { [regexp {^\S+} $item] } {
				if { ![regexp {^ERROR} $item] } {
					if { ![regexp {^dep_poll} $item] } {
						append out $item "\n"
					}
				}
			}
		}
	
        return 0
}


#=========================================================================================
#
# Procedure to map changes to the branch (manifest)
#
#=========================================================================================
proc getChangesForManifest { inManifest outChanges} {
    upvar 1 $outChanges out
	global lPrompt
	global fileName
    set out ""
    log_user 0
    set lCommand "~/bin/quic_py_libs/manifest_map.py --manifest $inManifest < $fileName\n"
    set lChanges [sendAndReturnOutput $lCommand $lPrompt 120]
    set lines [split $lChanges "\r\n"]  
	set out ""
	set numChanges 0
	foreach item $lines {
		if { [regexp {^Project\:} $item] } {
			append out $item "\n"
			incr numChanges
		}
	}
	return $numChanges
}
#=========================================================================================
# start

#
# get all the preflight-ready changes
set changes ""
set timeToProcess [time {getAllReadyChanges  changes }]
set f [open $fileName w]
puts $f $changes
close $f
set ttp ""
regexp {^(\d+) } $timeToProcess  a ttp
if { $ttp > 0 } {
	set ttp "[expr ($ttp/1000000.0)/60.0] mins"
	puts $ttp
}

#
# loop through all the branches that you want backlog information for
foreach manifestBranch $lmanifestBranch {
	#
	# map the ready changes to a branch
	set chgs ""
	set numChgs [getChangesForManifest $manifestBranch chgs]
	#
	# copy the results to a file to be mailed
	set chgsFile ""
	append chgsFile "/tmp/PreflightReadyChgs-" $manifestBranch ".txt"
	set f1 [open $chgsFile w]
	puts $f1 "Number of queued changes: $numChgs\n"
	puts $f1 "\n\n\n"
	puts $f $chgs
	close $f1
	set resultText ""
	append resultText $manifestBranch " Manifest Branch Preflight Queue"
	#
	# mail results to me for now
	set lCommand "mail $emailName  -s \"$resultText\"  < $chgsFile\n"
	sendSimple $lCommand $lPrompt 30 
}
exit 0
