#!/usr/bin/expect
#
# This script generates Gerrit merge statistics
#
#log_user 0
package require textutil::split
source ~/bin/aLib.exp
set timeout 3



log_user 0
#
# create a shell
spawn -noecho bash
puts "\n\n\n"
#
# set the prompt
set lPrompt "uniQuePrompt#"
set lCommand "export PS1=$lPrompt\n"
if {[sendSimple $lCommand $lPrompt 5]} {exit}

#
# setup log files
set fileName "/tmp/changesMergedTotal.txt"
set f [open $fileName w]


#
# get the currect time for reference
set sDate [clock seconds]
set eDate [expr [clock seconds] + (60*60*24)]

#
# Check to see if 1 or 2 tags are supplied - if only one then calculate the prec tag
if { [llength $argv] == 0 } {
} elseif { [llength $argv] == 2 } {
	set sDate [clock scan [lindex $argv 0]]
	set eDate [clock scan [lindex $argv 1]]
	set eDate [expr $eDate + (60*60*24)]
} elseif { [llength $argv] == 1 } {
	set sDate [clock scan [lindex $argv 0]]
	set eDate [expr $sDate + (60*60*24)]
} else {
	puts "\n\nUsage: genStats.exp 28-JUL-2009 31-JUL-2009"
	puts "Usage: genStats.exp  <start date> <end date>\n"
	exit
}

#
# set the start and end text dates (needed by sql command)
set sDateTxt [clock format $sDate -format {%Y-%m-%d}]
set eDateTxt [clock format $eDate -format {%Y-%m-%d}]
puts "\n\n"
puts $f "Start date: $sDateTxt"
puts $f "End date  : $eDateTxt"
set numDays [expr (($eDate - $sDate)/(60*60*24))]
puts $f "Num Days: $numDays"

set lChangeIds [list]
set numMerges 0
set numRebases 0
for {set j $sDate} { $j < $eDate} {incr j [expr (60*60*24)]} {

set fromDate [clock format $j -format {%Y-%m-%d}]
set toDate   [clock format [expr $j + (60*60*24)] -format {%Y-%m-%d}]
puts  "$fromDate $toDate"

#
#***** DB calls *****
set lChanges [list]
set lCommand "psql -h review-android.quicinc.com -U gerrit2_ro -c \"SELECT change_id,change_id,written_on,message,author_id FROM change_messages WHERE written_on BETWEEN \'$fromDate\' AND \'$toDate\'\" reviewdb\n"
puts $lCommand
doGerritQuery $lCommand $lPrompt 1000 lChanges
set changeMessages [textutil::split::splitx $lChanges {\r\n\s+\d+ \|}]
set sTotChanges 0

#
#
#***** Get the # of failed verifies by lnxbuild  and the # of rebases *****
foreach rec $changeMessages {
	regsub -all {[\r\n\a]+} $rec "" rec
	set fields [split $rec "|"]
	set  changeId  [lindex $fields 0]
	regsub -all {[\s\t]+} $changeId "" changeId
	set  time  [lindex $fields 1]
	set  msg  [lindex $fields 2]
	set  user  [lindex $fields 3]
	if { [regexp {\d{4}} $changeId ] } {
		if { [regexp {Change has been successfully merged into the git repository}  $msg] }  {
			set temp ""
			getUser $changeId retUser
			getBranch $changeId retBranch
			append temp "https://review-android.quicinc.com/#change,"  $changeId \
				"\t\t" $retBranch "\t\t" $retUser
			 lappend lChangeIds $temp
			incr numMerges
		} 
		if { [regexp \
		{The new patchset was rebased automatically by ABAIT Automation} $user ]} {
			incr numRebases
		}
	}
}
}
puts $f "\n\nNumber of Merges $numMerges"
puts $f "Average Changes/Day submitted [expr $numMerges/$numDays]"
puts $f "\n\nNumber of Successful Rebases $numRebases"
puts $f "Average Successful Rebases/Day [expr $numRebases/$numDays]"
puts $f "\n\n\n"
#puts $lChangeIds
foreach item [lsort $lChangeIds] {
	puts $f "$item"
}

close $f
#
# mail results to me
set lCommand "mail abait.stats@qualcomm.com  -s \
	\"Changes Merged from $sDateTxt to $eDateTxt\" \
	< $fileName\n"
sendSimple $lCommand $lPrompt 15
