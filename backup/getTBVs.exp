#!/usr/bin/expect
#
# Script for getting a list of 
#
source ~/bin/aLib.exp
set timeout 3

#
# create a shell
spawn bash

#
# set the prompt
set lPrompt "uniQuePrompt#"
set lCommand "export PS1=$lPrompt\n"
if {[sendSimple $lCommand $lPrompt 5]} {exit 1}

set timeout [expr 60]
expect -re .* {}

set lChanges ""
#
# setup the repo environment
exp_send "ssh review-android.quicinc.com /prj/lnxbuild/scripts/automation/SQL-verify-poll.sh changes\n"

expect {
	-re (.*)\r\n$lPrompt {
		#puts "\1\n"
		set lChanges $expect_out(1,string)
	}
	timeout {puts "Get Verified Changes Failed\n"; {exit 1} }
}


set records [split $lChanges "\n"]
set lsItems {}

#
# Iterate over the records
foreach rec $records {
	puts "rec: $rec"
	regsub -all {[ \r\t\n]+} $rec "" rec
	regsub -all {refs/heads/} $rec "" rec
	set fields [split $rec "|"]
	set  id  [lindex $fields 3]
	puts "id: $id"
	if { $id >= 0 } {
#		lappend lsItems [list [lindex $fields 1] $id [lindex $fields 0] [lindex $fields 2]]
	set sId 5
	
	regsub -all {[ \r\t\n]+} [lindex $fields 0] "" repo
	regexp -nocase {\d\d$} $id sId
		lappend lsItems [concat [lindex $fields 1] " git pull git://git-android.quicinc.com/$repo" " refs/changes/$sId/$id/[lindex $fields 2]"]
	}
}
set lsItems [lsort $lsItems]

set outfile [open "/tmp/report.out" w]
puts $outfile "Number of changes pending verify: [llength $lsItems]\n"
puts $outfile "Branch\tChange# Project"
set lsItems [lsort $lsItems]
set lBranch ""
foreach line $lsItems {
	regexp -nocase {^\S+} $line temp
	if { $lBranch != $temp } {
		set lBranch $temp
		puts $outfile "\nChanges for $lBranch"
	}
	
	regsub -all {^\S+} $line "" line
	puts $outfile "$line\t"
}
close $outfile
set lCommand "mail abait.items.tbv@qualcomm.com -s \"Items to be verified\" < /tmp/report.out\n"
if {[sendSimple $lCommand $lPrompt 15]} {exit 1}
exp_close 
#puts $lsItems

