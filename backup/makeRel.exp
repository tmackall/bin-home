#!/usr/bin/expect
#
# This script generates an email with the changes, commits, and CR #'s between 2 tags
#
source /prj/lnxbuild/scripts/automation/aLib.exp
set timeout 3
set lColors {indianred lightcoral orangered crimson darkred pink hotpink palevioletred khaki lightgoldenrodyellow lemonchiffon gold moccasin cyan aquamarine mediumturquoise cadetblue lightcyan powderblue steelblue skyblue deepskyblue royalblue dodgerblue mediumblue navy lightsalmon darkorange tomato aquamarine springgreen greenyellow lawngreen lightgreen limegreen darkseagreen seagreen olivedrab darkolivegreen mediumaquamarine lightseagreen teal thistle violet magenta mediumorchid blueviolet mediumpurple purple darkslateblue honeydew azure ghostwhite lavenderblush antiquewhite snow beige oldlace ivory lightgrey darkgray dimgray lightslategray cornsilk bisque wheat goldenrod peru maroon brown darkred tan black darksalmon salmon red firebrick mediumvioletred lightpink deeppink darkkhaki palegoldenrod lightyellow yellow papayawhip peachpuff aqua turquoise darkturquoise slategray paleturquoise lightsteelblue lightblue lightskyblue cornflowerblue mediumslateblue blue darkblue midnightblue orange coral orangered mediumspringgreen palegreen chartreuse lime yellowgreen mediumseagreen forestgreen green olive darkgreen turquoise darkcyan lavender plum fuchsia orchid darkorchid darkviolet slateblue darkmagenta indigo mintcream aliceblue whitesmoke mistyrose seashell white linen floralwhite gainsboro silver gray darkslategray slategray blanchedalmond navajowhite sandybrown darkgoldenrod chocolate saddlebrown sienna burlywood rosybrown}



if {[info exists env(REL_USER)]} {
	set relUser $env(REL_USER)
} else {
	set relUser "tmackall"
}

#
# Process the input parameters
if {  [llength $argv] == 4 } {
	set outDir [lindex $argv 3]
	set workspace [lindex $argv 2]
	set toTag [lindex $argv 1] 
	set fromTag [lindex $argv 0] 
	puts "old release: $fromTag\n"
} else {
	puts "\n\nUsage: makeRelease.exp au-01.08.00.XXX au-01.08.00.YYY /local/mnt/workspace/release /tmp"
	puts "Usage: makeRelease.exp  <from tag> <to tag> <workspace head dir> <outfile dir>\n"
	exit 1
}
#
# create a shell
spawn bash

#
# set the prompt
set lPrompt "uniQuePrompt#"
set lCommand "export PS1=$lPrompt\n"
if {[sendSimple $lCommand $lPrompt 5]} {
	puts "Failed: set prompt\n"
	exit 1
}


set timeout [expr 120]
expect -re .* {}

set lChanges ""
match_max 10000000

#
# cd to the nightly dir
set lCommand "cd $workspace\n"
if { [sendSimple $lCommand $lPrompt 5] } {
	puts "Failed: $lCommand\n"
	exit 2
}

#set vendor_qcom_prop_dir [exec repo forall platform/vendor/qcom-proprietary/release -c {echo $REPO_PATH} | sed -e {s|/release||}]

#
# find out what dir sctucture is supported for this codeline/manifest.
if {[file isdirectory "$workspace/vendor/qcom/proprietary"]} {
	set vendor_qcom_prop_dir "$workspace/vendor/qcom/proprietary"
} else {
	set vendor_qcom_prop_dir "$workspace/vendor/qcom-proprietary"
}

#
# clear the expect out buffer
expect -re .* {}


#
#****** Process Commit Log info *****
exp_send "repo forall -c \"git log $fromTag..$toTag\"\n"

set timeout [expr 20*60]
expect {
	-re "(.*)\r\n$lPrompt" {
		# capture the output
		set lChanges $expect_out(1,string)
	}
	timeout {
		puts "Failed to the the commit info\n" 
		exit 5
	}
}


#
#***** Process CRs from commit logs *****
set lines [split $lChanges "\u001b\033"]
array unset commitText
set lastCommit ""
set lines [lreplace $lines 0 0]
set lCRs [list]
set commits [list]
foreach {line text} $lines {
	# split the text up by line, since there could be multiple CR lines
	set crs [split $text "\r\n"]
	foreach cr $crs {
		if { [regexp -nocase {cr\'?s?.(fixed)? *: *(.*)} $cr a b theCR] } {
			regsub -all {[ \r\t\n]+} $theCR "" theCR
			foreach item [split $theCR ","] {
            	regexp {^(\d{6}).*} $item a item2
                if { [info exists item2]} {
                	if { -1 == [lsearch -exact $lCRs $item2] } {
                            lappend lCRs $item2
                	}
                }
            }
		}
	}
}
if { [info exists lCRs] } {
	foreach item $lCRs {
		regsub -all {\D*} $item "" item
		lappend lCRs $item
	}
}
set test 1
set branch ""
# pull out the commit ID and the associated text
foreach {line text} $lines {
	puts "line:\"$line\""
	if { [regexp {commit (\w+).*} $line a theCommit] } {
		lappend commits $theCommit
		set lastCommit $theCommit
		puts "xxxcommit \"$theCommit\"\n"
	} 
	regsub -all {^..} $text "" text
	set commitText($lastCommit) $text
	puts "text: $commitText($lastCommit)"
	if { $test && [regexp {.*Merge change \d+ into (\w+).*} $text a tb]  } {
		set branch $tb
		set test 0
	}
}




#
#***** Process Gerrit change ids *****
exp_send "psql -h review-android.quicinc.com -U gerrit2_ro -c \'SELECT * FROM patch_sets\' reviewdb\n"

expect {
	-re ".*\r\nPassword:" {
		exp_send "Autolnx1\n"
		exp_continue
	}
	-re ".*\r\nPassword for user gerrit2_ro:" {
		exp_send "letmeout\n"
		exp_continue
	}
	-re "(.*)\r\n$lPrompt" {
		# capture the output
		set lChanges $expect_out(1,string)
	}
	timeout {puts "Getting the changes from the DB failed\n"; exit }
}


#
#***** Correlate the commit ids with the change ids *****
set records [split $lChanges "\r\n"]
set lsItems {}
array unset lsSubmitItems
set lsNotSubmitItems {}
foreach rec $records {
	regsub -all {[ \r\t\n]+} $rec "" rec
	regsub -all {refs/heads/} $rec "" rec
	set fields [split $rec "|"]
	set  commitId  [lindex $fields 0]
	set  changeId  [lindex $fields 3]
	if { [regexp {\d+} $changeId] } {
		set lsSubmitItems($commitId) $changeId
	}
}



#
#***** Process the modems ******
#
# grab all the modems that are in the workspace
set lCommand "find $vendor_qcom_prop_dir/modem-apis -name API_INFO\n"
set lChanges [sendAndReturnOutput $lCommand $lPrompt 30]
set lModems [list]

#
# pull out all the garbage to get the dir names and modems
foreach line [split $lChanges "\r\n"] {
	#
	# make sure that there is a file and steal the target ID from it
        puts "modem line $line\n"
	if {[regexp {^\s*.*proprietary/modem-apis\/([^\/]+)} $line a \
		target ]} {
		set lCommand ""
		#
		# since the modems don't exist in our workspace - take the
		# modem ID from the whereisbuild command
		append lCommand "egrep \"\% whereisbuild\"" " "  $line "\n"
		set output [sendAndReturnOutput $lCommand $lPrompt 30]

		if { [regexp {.*-b=(\S+)} $output a modem]} {
			lappend lModems "$modem $target"
			
		}
	}
}
set lModems [lsort $lModems]

#
# print out the modems
set f [open "$outDir/$toTag-modems.out" w]
foreach modem $lModems {
	puts $f "$modem"
}
close $f
#
# print out the CRs
set f [open "$outDir/$toTag-CRs.out" w]
foreach cr $lCRs {
	puts $f "$cr"
}
close $f



#
# print out the commits and changes
array unset changes
set f [open "$outDir/$toTag-changes.out" w]
set lChanges [list]
puts $f "\nThis is a list of the changes and commits in this release\n\n"
foreach commit $commits {
	if { [info exists lsSubmitItems($commit)] } {
		if {! [info exists changes($commit)]} {
			puts $f "Change Num: $lsSubmitItems($commit)\nCommit ID: $commit"
			puts $f $commitText($commit)
			set changes($commit) 1
			lappend lChanges $lsSubmitItems($commit)
		}
	}
}
close $f

#
# create the wiki page segment
set f [open "$outDir/$toTag-wiki.out" w]
puts $f "\{| \{\{table\}\} border=\"5\""
puts $f "| align=\"center\" style=\"background:#f0f0f0;\"|'''Branch'''"
puts $f "| align=\"center\" style=\"background:#f0f0f0;\"|'''Tag'''"
puts $f "| align=\"center\" style=\"background:#f0f0f0;\"|'''Target'''"
puts $f "| align=\"center\" style=\"background:#f0f0f0;\"|'''Modem'''"
foreach {target modem} $lModems {
	set color  [lindex $lColors [expr int (rand()* [llength $lColors])]]
	puts $f "|- align=\"center\" style=\"background:$color;\""
	puts $f "|$branch||$toTag||$target||$modem"
}
puts $f "|\}"
#
# wiki changes
puts $f "\n\n\{| \{\{table\}\} border=\"5\""
puts $f "| align=\"center\" style=\"background:#f0f0f0;\"|'''Changes since the Last AU'''"
set chgs [join [lsort $lChanges] ,]
set color  [lindex $lColors [expr int (rand()* [llength $lColors])]]
	puts $f "|- align=\"center\" style=\"background:$color;\""
	puts $f "|$chgs"
puts $f "|\}"
#
#wiki CRs
puts $f "\n\n\{| \{\{table\}\} border=\"5\""
puts $f "| align=\"center\" style=\"background:#f0f0f0;\"|'''CRs fixed since the Last AU'''"
set crs [join [lsort $lCRs] ,]
set color  [lindex $lColors [expr int (rand()* [llength $lColors])]]
	puts $f "|- align=\"center\" style=\"background:$color;\""
	puts $f "|$crs"
puts $f "|\}"
close $f
