#!/usr/bin/expect
#
# Script for getting a list of 
#
source ~/bin/aLib.exp
set timeout 3
#
# if I want to send email to all the offenders
set input [lindex $argv 0] 
set fMail 0
if {$input == "s" } {
	puts "send spam\n"
        set fMail 1
} 
#
# create a shell
spawn bash

#
# set the prompt
set lPrompt "uniQuePrompt#"
set lCommand "export PS1=$lPrompt\n"
if {[sendSimple $lCommand $lPrompt 5]} {exit 1}

set timeout [expr 60]
expect -re .* {}

set lChanges ""
#
# setup the repo environment
exp_send "ssh review-android.quicinc.com \"psql -U gerrit2_ro -c \'select * from blame\' reviewdb\"\n"
#exp_send "ssh git-android \"psql -U gerrit2_ro -c \"SELECT * FROM blame WHERE category_id=\'VRIF\' AND value<>1\" reviewdb\"\n"
#SELECT * FROM blame WHERE category_id='VRIF' AND value<>1;

expect {
	-re ".*\r\nPassword for user gerrit2_ro:" {
		exp_send "letmeout\n"
		exp_continue
	}
	-re "(.*)\r\n$lPrompt" {
		puts "made it2\n"
		set lChanges $expect_out(1,string)
	}
	timeout {puts "Get Verified Changes Failed\n"; exit }
}

set records [split $lChanges "\r\n"]
set lsItems {}
array unset lsSubmitItems
set lsNotSubmitItems {}

#
# Iterate over the records
foreach rec $records {
	regsub -all {[ \r\t\n]+} $rec "" rec
	regsub -all {refs/heads/} $rec "" rec
	puts "rec: $rec"
	set fields [split $rec "|"]
	set  id  [lindex $fields 0]
	puts "id: \"$id\""
	if { [regexp {^[[:digit:]]+$} $id] > 0} {
		if { [regexp "CRVW" [lindex $fields 5]] } { 
			if { [lindex $fields 4] == 2} { 
				lappend lsItems [list [lindex $fields 3] $id \
					[lindex $fields 1] \
					[lindex $fields 2] [lindex $fields 5] \
					[lindex $fields 4] ]
			}
		}
	}
	if { [regexp {^[[:digit:]]+$} $id] > 0} {
		if { [regexp "VRIF" [lindex $fields 5]] } { 
				set lsSubmitItems($id) [list [lindex $fields 3] $id \
					[lindex $fields 1] \
					[lindex $fields 2] [lindex $fields 5] \
					[lindex $fields 4] ]
		}
	}
}

#
# create script to unverify
set f [open "/tmp/unverify.sh" w]
puts $f "\#!/bin/bash"
set outfile [open "/tmp/gerritReport.out" w]
puts $outfile "Number of items needing attention: [llength $lsItems]\n"
puts $outfile "Branch\tChange#\tSubmitter\tProject\tState"
set lsItems [lsort $lsItems]
foreach line $lsItems {
	puts $f "./clearVerify.exp [lindex $line 1]"
	puts $outfile "$line\t"
}

close $f
foreach key [array names lsSubmitItems] { 
	if { [lindex $lsSubmitItems($key) 5] != 1} {
		lappend lsNotSubmitItems [ list $lsSubmitItems($key)]
	}
}
puts $outfile "\n\nItems to be verified:  [llength $lsNotSubmitItems]\n"
set lsNotSubmitItems [lsort $lsNotSubmitItems]
foreach line $lsNotSubmitItems {
		puts $outfile "$line\t"
}
close $outfile
puts [clock format [clock seconds]]
set lCommand "mail tmackall -s \"Items to be submitted\" < /tmp/gerritReport.out\n"
if {[sendSimple $lCommand $lPrompt 15]} {exit 1}
set i 1
set j [list tmackall@quicinc.com]

#
# code to spam all
if { $fMail } {
	set spam [open "/tmp/spam.out" w]
	puts $spam "You are being sent this email because this gerrit change requires your attention\n\nThis means that the change failed verification, needs to be submitted, needs to be approved, or possibly needs to be abandoned.\n\nPlease see our wiki to determine an approver: http\:\/\/qwiki.qualcomm.com\/qct-linux\/Gerrit_Approvers_List\n\nYou will continue to get these reminders until the changes is merged or abandoned. Please contact me if you need help moving the change along. All changes must be either merged to abandoned by May 1 (This Friday) when we move to QuIC.\n\nThanks,\n-tom"
	close $spam
	foreach line $lsItems {
		set fields [split $line " "]
		set lCommand "mail [lindex $fields 2]  -s \
			\"Gerrit change\# [lindex $fields 1] needs your attention\" \
			< /tmp/spam.out\n"
		if {[sendSimple $lCommand $lPrompt 15]} {exit 1}
		#puts "lc: $lCommand\n"
	}
}
exp_close 

