#!/usr/bin/expect
#
# This script generates Testing statistics
#
source ~/bin/aLib.exp
set timeout 3
log_user 0

set numDaysOfReports 1
set twentyFourHours [expr 3600*24]
set currTime [clock seconds]
set jobName "priority_preflight*"
set emailName abait.stats@qualcomm.com
set jobInfo "Mainline Health"
set timeInfo "1 day"
set jobType 0
set expectedTestRuns 0
set jobSummaryPy "/local/mnt/workspace/tmackall/gb/vendor/qcom/proprietary/dejagnu/tools/bin/jobsummary.py"

#
# process command-line arguments
if { $argc == 0 } { 
	# no args gives you a 24 hour report
	set startTime [expr $currTime - $twentyFourHours]
} 


#
# process # of days to report on and handle help request
if { $argc > 0 } {
	if { [regexp {\-h} [lindex $argv 0]] } {
		puts "Usage getStabilityStatus.exp (num days of results) (job type 1 = gingerbread prefligt) (# hours - takes precedent over days) (test mode)"
		exit 2
	}
	set numDaysOfReports [lindex $argv 0]
	
	# interpret a single command-line arg as the num days you want a report for
	set startTime [expr $currTime - $numDaysOfReports*$twentyFourHours]
	set timeInfo "[expr $numDaysOfReports * 24] hours"
} 

#
# handle hours (hours trump days)
if { $argc > 2 } {
	set startTime [expr $currTime - [lindex $argv 2]*3600]
	set timeInfo "[lindex $argv 2] hours"
}

if { $argc > 1 } {
	set emailName tmackall@quicinc.com
}
#
# create a shell
spawn bash

#
# set the prompt
set lPrompt "uniQuePrompt#"
set lCommand "export PS1=$lPrompt\n"
if {[sendSimple $lCommand $lPrompt 5]} {exit}

proc getJobParameters { iJobDetails oOutcome} {
	upvar 1 $oOutcome rlParams
	set lines [split $iJobDetails "\r\n"]  
	set paramName ""
	set fParamReady 0
	set fStart 0
	for { set i 0 } { $i < [llength $lines] } { incr i }  {
		set item [lindex $lines $i]
		if { [regexp {launchedByUser\>(.*)\<\/launchedByUser} $item a b]} {
			lappend rlParams "launchedByUser: $b"
		} elseif { $fStart == 0 && \
			[regexp {createTime\>(.*)\<\/createTime} $item a b]} {
			lappend rlParams "createTime: $b"
			set fStart 1
		} elseif { [regexp {actualParameterName\>(.*)\<\/actualParameterName} \
			$item a b]} {
			set paramName $b
			set fParamReady 1
		} elseif { $fParamReady == 1 && [regexp {value\>(.*)\<\/value} $item a b]} {
			lappend  rlParams "$paramName: $b"
   			#puts "$paramName $b"
			set fParamReady 0
		} elseif { $fParamReady == 1 && [regexp {value\>(.*)} $item a b]} {
			set tValue ""
			lappend tValue "$paramName:"
			append tValue "\n"  $b "\n"
			set j $i
			incr j
			set titem [lindex $lines $j]
			while { ![regexp {(.*)\<\/value} $titem a b] } {
				append tValue "$titem\n" 
				incr j
				set titem [lindex $lines $j]
			}
			append tValue $b
			lappend rlParams $tValue
   			#puts "$paramName $tValue"
			set fParamReady 0
			set i $j
		}
	}
}
proc getJobDetails { jobId oOutcome} {
        upvar 1 $oOutcome out
        global lPrompt
        log_user 0
        set lCommand "ectool getJobDetails $jobId\n"
        set lChanges [sendAndReturnOutput $lCommand $lPrompt 60]
		#array unset arrparams
		set out [list]
		getJobParameters $lChanges out
        return 0
}
set fileContents [list]
set dirList [list]

#
#****** grab all test directories ******
set timeout 20
set workspaces "/prj/lnxbuild/workspaces/"
set jobIdList [list]
#array unset aJobStatus

array unset jobDetails
#
# get the job dirs and filter out dirs before start date
foreach dirName [glob -nocomplain -type d -directory \
	$workspaces $jobName] {
	#file stat $dirName lCtime
	file stat $dirName lCtime
	set fileModTime $lCtime(ctime)
	#
	# only process jobs from the start date
	if { $fileModTime > $startTime } {
		#
		# get the job ID
		regexp {.*_([[:digit:]]*)$} $dirName a jobId
		array unset arrTemp
		if { $jobId != "" } {
			getJobDetails $jobId arrTemp
			set jobDetails($jobId) $arrTemp
		}
	}
}



#
# now write the file out
set fileName "/tmp/JobPPF.out"
set f [open $fileName w]
set keys [lsort -integer [array names jobDetails]] 
foreach key $keys {
	puts $f "\n\n\nJob ID: $key"
	foreach i $jobDetails($key) {
       regsub -all {[\n]+} $i "\n" i
		puts $f $i
	}
}
close $f


# create the email subject line
append resultText "Priority Preflight - " [array size jobDetails] \
		" jobs - for the past $timeInfo"
set emailName "abait.stats@qualcomm.com"
#set emailName "tmackall@qualcomm.com"
#
# mail results to me for now
set lCommand "mail $emailName  -s \"$resultText\"  < $fileName\n"
if {[sendSimple $lCommand $lPrompt 15]} {exit}
